### uvicorn main:app --reload --host=172.20.146.211 --port=5566

from fastapi_offline import FastAPIOffline

from fastapi import Depends, FastAPI
from fastapi.security import OAuth2PasswordBearer
from typing_extensions import Annotated

app = FastAPIOffline()


# ————————————————————————————————————————————————————————————————————————————— simplest
# respond simple response
# —————————————————————————————————————————————————————————————————————————————

@app.get("/")    ### Path -> "/" -> http://127.0.0.1:8000/   |||| "/home -> http://127.0.0.1:8000/home
async def root():
    return {"message": "Hello World"}


@app.get("/hi")
async def simple_respond():
    a = {"message": "Hello World"}
    b = {"message2": "Hello World2"}
    c = 'hi there i am string'
    return a
# we couldnt add two dict and returen it a + b
# we could return a string like c but it is better to out json structure data like dict



# ————————————————————————————————————————————————————————————————————————————— path parameter
# path parameter
# —————————————————————————————————————————————————————————————————————————————
@app.get("/items/{item_id}")
async def path_params(item_id: int):   # declare the type of a path parameter with type hint
    return {"item_id": item_id}
# http://127.0.0.1:8000/items/2


# ————————————————————————————————————————————————————————————————————————————— order matter
# order matters
# —————————————————————————————————————————————————————————————————————————————
# Order Matters: Put Fixed Paths First


@app.get("/users/me")
async def read_user_me():
    return {"user_id": "the current user"}


@app.get("/users/{user_id}")
async def read_user(user_id: str):
    return {"user_id": user_id}





@app.get("/oreder_matters")
async def read_users():
    return ["Rick", "Morty"]


@app.get("/oreder_matters")
async def read_users2():
    return ["Bean", "Elfo"]


### if we had two or more functions for 1 path, the  first path just shows first function



# ————————————————————————————————————————————————————————————————————————————— order matter
# enum
# —————————————————————————————————————————————————————————————————————————————
# from enum import Enum
#
# class ModelName(str, Enum):
#     alexnet = "alexnet"
#     resnet = "resnet"
#     lenet = "lenet"
#
#
#
#
# @app.get("/models/{model_name}")
# async def enum_class_(model_name: ModelName):
#     if model_name is ModelName.alexnet:
#         return {"model_name": model_name, "message": "Deep Learning FTW!"}
#
#     if model_name.value == "lenet":
#         return {"model_name": model_name, "message": "LeCNN all the images"}
#
#     return {"model_name": model_name, "message": "Have some residuals"}
# from enum import Enum

# class ModelName(str, Enum):
#     alexnet = "alexnet"
#     resnet = "resnet"
#     lenet = "lenet"
#
#
# app = FastAPI()
#
#
# @app.get("/models/{model_name}")
# async def enum_class_(model_name: str):
#     if model_name == 'alexnet':
#         return {"model_name": model_name, "message": "Deep Learning FTW!"}
#
#     if model_name == "lenet":
#         return {"model_name": model_name, "message": "LeCNN all the images"}
#
#     return {"model_name": model_name, "message": "Have some residuals"}



# —————————————————————————————————————————————————————————————————————————————
# SET directory in path parameter
# —————————————————————————————————————————————————————————————————————————————
@app.get("/files/{file_path:path}")
async def read_file(file_path: str):
    return {"file_path": file_path}

# —————————————————————————————————————————————————————————————————————————————
# query parameters
# —————————————————————————————————————————————————————————————————————————————

fake_items_db = [{"item_name": "Foo"}, {"item_name": "Bar"}, {"item_name": "Baz"}]


@app.get("/items_query/")
async def query_params(skip: int = 0, limit: int = 10):
    return fake_items_db[skip : skip + limit]




# —————————————————————————————————————————————————————————————————————————————
#5 optional  query parameter
# —————————————————————————————————————————————————————————————————————————————

from typing import Union


@app.get("/items_opt/{item_id}")
async def optional_(item_id: str, q: str | None):
    if q:
        return {"item_id": item_id, "q": q}
    return {"item_id": item_id}

### if set defualt value as None, it become optional
### /items_opt/alaki?q=hha

# —————————————————————————————————————————————————————————————————————————————
# mix of path and query parameter
# —————————————————————————————————————————————————————————————————————————————

from typing import Union
from fastapi import FastAPI



@app.get("/users/{user_id}/items/{item_id}")
async def read_user_item(
   user_id: int, item_id: str, q: Union[str, None] = None, short: bool = False
):
    item = {"item_id": item_id, "owner_id": user_id}
    if q:
        item.update({"q": q})
    if not short:
        item.update(
           {"description": "This is an amazing item that has a long description"}
       )
    return item

### http://172.20.146.211:5566/users/12/items/w


# —————————————————————————————————————————————————————————————————————————————
# set max_lenght
# —————————————————————————————————————————————————————————————————————————————

from typing import Union

from fastapi import Query



@app.get("/items_maxl/")
async def read_items(q: str | None = Query(default=None, max_length=50)):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results

### http://172.20.146.211:5566/items_maxl/?q=saldasdsajdasd%27sasadasdsadasdasdasdasdsadsadasdasddasdasadasdsdaasd





# —————————————————————————————————————————————————————————————————————————————
# enum class instead set parameters
# —————————————————————————————————————————————————————————————————————————————


from enum import Enum


class ModelName(str, Enum):
    alexnet = "alexnet"
    resnet = "resnet"
    lenet = "lenet"


@app.get("/enum/{model_name}")
async def get_model(model_name: ModelName):
    if model_name is ModelName.alexnet:
        return {"model_name": model_name, "message": "Deep Learning FTW!"}

    if model_name.value == "lenet":
        return {"model_name": model_name, "message": "LeCNN all the images"}

    return {"model_name": model_name, "message": "Have some residuals"}

### http://172.20.146.211:5566/models/alexnet


# —————————————————————————————————————————————————————————————————————————————
# request Body: pydantic
# —————————————————————————————————————————————————————————————————————————————
from typing import Union
from pydantic import BaseModel


class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: float
    tax: Union[float, None] = None



@app.post("/req_/")
async def create_item(item: Item):
    item_dict = item.dict()
    if item.tax:
        price_with_tax = item.price + item.tax
        item_dict.update({"price_with_tax": price_with_tax})
    return {"status" : "SUCCESS",
            "data" : item_dict}

# —————————————————————————————————————————————————————————————————————————————
# query-params-str-validations: max and min length of query with Annotated + regex on that
# —————————————————————————————————————————————————————————————————————————————
from typing import Annotated

from fastapi import  Query

@app.get("/Annotated/")
async def Annotated0(
    q: Annotated[str | None, Query(min_length=3, max_length=50,regex="^fixedquery$")] = ... # ... set value required
):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results

# —————————————————————————————————————————————————————————————————————————————
# a query parameter in the list mode
# —————————————————————————————————————————————————————————————————————————————


@app.get("/list_query/")
async def list_query(q: Annotated[list[str] | None, Query()] = None):
    query_items = {"q": q}
    return query_items
# http://127.0.0.1:8000/list_query/?q=ef&q=po&q=oop

# —————————————————————————————————————————————————————————————————————————————
# a query parameter with the list defualts
# —————————————————————————————————————————————————————————————————————————————
@app.get("/items_/")
async def read_items(q: Annotated[list[str], Query()] = ["foo", "bar"]):
    query_items = {"q": q}
    return query_items
# http://127.0.0.1:8000/items_/     in this ENDPOINT there is

# —————————————————————————————————————————————————————————————————————————————
# multi_query
# —————————————————————————————————————————————————————————————————————————————
@app.get("/multi_query/")
async def ok_im_func(q: Annotated[list[str] | None, Query()] = None):
    query_items = {"q": q}
    return query_items


# —————————————————————————————————————————————————————————————————————————————
# title to query parameter
# —————————————————————————————————————————————————————————————————————————————
from typing import Annotated

@app.get("/title/")
async def title(
    q: Annotated[
        str | None,
        Query(
            title="Query string",
            description="Query string for the items to search in the database that have a good match",
            min_length=3,
        ),
    ] = None
):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results



# —————————————————————————————————————————————————————————————————————————————
# allies
# —————————————————————————————————————————————————————————————————————————————
@app.get("/allies/")
async def allies(q: Annotated[str | None, Query(alias="item-query")] = None):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results



# http://127.0.0.1:8000/allies/?item-query=gijk




# —————————————————————————————————————————————————————————————————————————————
# deprecated
# —————————————————————————————————————————————————————————————————————————————
@app.get("/deprecated/")
async def deprecated(
    q: Annotated[
        str | None,
        Query(
            alias="item-query",
            title="Query string",
            description="--title-- Query string for deprecated param",
            min_length=3,
            max_length=50,
            regex="^fixedquery$",
            deprecated=True,
            # include_in_schema=False, ؟
        ),
    ] = None
):
    results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
    if q:
        results.update({"q": q})
    return results

# http://127.0.0.1:8000/deprecated/?item-query=fixedquery




# —————————————————————————————————————————————————————————————————————————————
# gt  &  lt
# —————————————————————————————————————————————————————————————————————————————

from fastapi import FastAPI, Path, Query


@app.get("/ge/{item_id}")
async def gele(
    *,
    item_id: Annotated[int, Path(title="The ID of the item to get", ge=0, le=1000)],
    q: str,
    size: Annotated[float, Query(gt=0, lt=10.5)],
):
    results = {"item_id": item_id}
    if q:
        results.update({"q": q})
    return results


# http://127.0.0.1:8000/ge/-5?q=rrrr&size=6.4



# —————————————————————————————————————————————————————————————————————————————
# Multiple body parameters¶
# —————————————————————————————————————————————————————————————————————————————
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None


class User(BaseModel):
    username: str
    full_name: str | None = None


@app.put("/multiple_reqBody/{item_id}")
async def update_item(item_id: int, item: Item, user: User):
    results = {"item_id": item_id, "item": item, "user": user}
    return results









# —————————————————————————————————————————————————————————————————————————————
# Config
# —————————————————————————————————————————————————————————————————————————————


class Itsem(BaseModel):
    name: str
    description: str | None = None
    price: float
    tax: float | None = None

    class Config:
        schema_extra = {
            "example": {
                "name": "Foo",
                "description": "A very nice Item",
                "price": 35.4,
                "tax": 3.2,
            }
        }


@app.put("/config_/{item_id}")
async def update_item(item_id: int, item: Itsem):
    results = {"item_id": item_id, "item": item}
    return results




# —————————————————————————————————————————————————————————————————————————————
# test auth
# —————————————————————————————————————————————————————————————————————————————

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

@app.get("/auth/")
async def read_items(token: Annotated[str, Depends(oauth2_scheme)]):
    return {"token": token}

# —————————————————————————————————————————————————————————————————————————————
# Templates
# —————————————————————————————————————————————————————————————————————————————
'''
must mkdir template folder in path and item.html in it
for css files create static folder and put them to it 
'''

from fastapi import Request
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates


app.mount("/static", StaticFiles(directory="static"), name="static")

templates = Jinja2Templates(directory="templates")


@app.get("/temp/{id}", response_class=HTMLResponse)
async def read_item(request: Request, id: str):
    return templates.TemplateResponse("item.html", {"request": request, "id": id})


###   http://172.20.146.211:5566/temp/5

# —————————————————————————————————————————————————————————————————————————————

# —————————————————————————————————————————————————————————————————————————————
