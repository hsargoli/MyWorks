




# #################################################### ###################################################--
# #################################################### ###################################################--
# #################################################### ###################################################--


# to create env
python -m venv name_of_venv

# to activate env 
path\to\env\Script\activate.bat


# #################################################### ###################################################--
# #################################################### ###################################################--
# #################################################### ###################################################--


# -----------------------------------
''' example of async '''
# -----------------------------------


# countasync.py

import asyncio

async def count():
    print("One")
    await asyncio.sleep(1)
    print("Two")

async def main():
    await asyncio.gather(count(), count(), count())

if __name__ == "__main__":
    import time
    s = time.perf_counter()
    asyncio.run(main())
    elapsed = time.perf_counter() - s
    print(f"{__file__} executed in {elapsed:0.2f} seconds.")



# #################################################### ###################################################--
# #################################################### ###################################################--
# #################################################### ###################################################--


https://www.analyticsvidhya.com/blog/2020/10/feature-selection-techniques-in-machine-learning/
python.exe -m pip install --upgrade pip

--
# #################################################### ###################################################--
# #################################################### ###################################################--
# #################################################### ###################################################--

python -m pdb stack_new.py


--
# #################################################### ###################################################--
# #################################################### ###################################################--
# #################################################### ###################################################--
time_report
def time_report (save_path, pre_time,tipe: str, current:str, nextt:str):
    xxxx = datetime.datetime.now()
    minitue = int(xxxx.minute + 23)
    hour = int(xxxx.hour) + 3
    if minitue >= 60:
        hour = hour + 1 
        minitue = minitue - 60
    clock = hour , minitue, xxxx.strftime('%D')
    with open(save_path + filename + '.txt', tipe) as reportt: 
        print(f'# {current} DONE ||# Next step: {nextt} || run time: {time.time() - pre_time:.3f} || date {clock}', file = reportt)     
--
# #################################################### ###################################################--
# #################################################### ###################################################--
# #################################################### ###################################################--
# TIME CODE  USE %timeit, decorator or:
time1 = time.time()

# CODE

print('elapsed time: ', time.time() - time1) 
--
# #################################################### ###################################################--
# #################################################### ###################################################--
# #################################################### ###################################################--
#  memmory usage
# ====================================
import sys
import numpy as np
local_var = list(locals().items())
a = []
b = []
for i,j in local_var:
    aa = int(sys.getsizeof(j))
    zz = i
    if aa>=10000:
        
        b.append(zz)
        a.append(aa)
c = list(zip(b,a))
print(*c, sep = '\n')

--
# #################################################### ###################################################--
# #################################################### ###################################################--
# #################################################### ###################################################--
# for terminal 
nohup python func.py %
cd /data/sargoli/code
--
# #################################################### ###################################################--
# #################################################### ###################################################--
# #################################################### ###################################################--
get xy
x_df = df98_csv.loc[:, df98_csv.columns != 'target']
y_df = df98_csv.loc[:, df98_csv.columns == 'target']
x_test, y_test = np.array(x_df), np.array(y_df)
--
# #################################################### ###################################################--
# #################################################### ###################################################--
# #################################################### ###################################################--
class_percent = dict(df_df.LABEL.value_counts()/df_df.shape[0])
class_percent

--
# #################################################### ###################################################--
# #################################################### ###################################################--
# #################################################### ###################################################--

import sys
sys.path.insert(0, r'C:\Users\sargoli\project')

del merge_df['Unnamed: 0']

--
# #################################################### ###################################################--
# #################################################### ###################################################--
# #################################################### ###################################################--
with open(load_path, 'rb') as f:
    lr = pickle.load(f)
	
	
with open(name + '_' +  date0 + '.txt', 'w') as file: 
	file.write('DATA FRAME description:\n')	
	

--
# #################################################### ###################################################--

import sys 
filename = sys.argv[0]
filename = filename.split('/')
filename = filename[-1][:-3]
print(filename)

with open('/data/sargoli/moments/_momentReportOf_' + filename + '.txt', 'w') as reportt: 
    print('-- start', file = reportt)





--
# #################################################### ###################################################--


with open(pre_save_name + filename + '.txt', 'a') as reportt: 
    print(' _ elapsed time: ', time.time() - time1,'\t Next: ', end = '\n', file = reportt) 



----------------------------------------





--
# #################################################### ###################################################--

cd /data/sargoli/code


nohup python test.py &

--
# #################################################### ###################################################--
# insert path 

sys.path.insert(0, '/data/sargoli/code')





--
# #################################################### ###################################################--


nohup python train_each_dataframe_logit.py;nohup python test_each_dataframe.py; nohup python stack2.py


--
--
    
with open(model_path, 'rb') as f:
    rf_rf = pickle.load(f)    
    
--
--

# np save load

import numpy as np
np.savetxt(f'/data/sargoli/report/test_models/inbalance_dfname_{df_name}__modelname_{model_name}_ypred.txt', y_preds, encoding='utf-8')
np.savetxt(f'/data/sargoli/report/test_models/inbalance_dfname_{df_name}__modelname_{model_name}_ytrue.txt', y_true, encoding='utf-8')

y_true0 = np.loadtxt(f'/data/sargoli/report/test_models/dfname_test1400_0__modelname_2_LGBoost__ytrue.txt')

--
--
--

# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
time_sg.time_report(ppre,time1,'a','--> >>>start loop<<<<<<< ', '--> -----load data------ ');time1 = time.time() 
# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


--
--
--


--
--
--

ppsutil.virtual_memory()